-- SQL B3 Note D1

DROP TABLE IF EXISTS orders;

-- creating orders table

CREATE TABLE orders(
                    order_id VARCHAR(25),	
                    order_date DATE,	
                    customer_id VARCHAR(25),
                    state VARCHAR(55),
                    category VARCHAR(55),
                    sub_category VARCHAR(105),
                    product_id VARCHAR(25),
                    price_per_unit FLOAT,
                    quantity INT,
                    sale FLOAT,
                    seller_id VARCHAR(25)
                    );


SELECT * FROM orders;



SELECT 
    COUNT(*) as total_orders 
FROM orders;


--Q1 What is the total revenue generated?

SELECT 
    SUM(sale) as total_sale 
FROM orders;


-- Q.2 How many products do we have?

SELECT 
    COUNT(DISTINCT product_id) as Total_products
FROM orders

SELECT
    COUNT(DISTINCT product_id)
FROM orders

-- Q.3 Find  out top 5 order details by sales amount?

SELECT 
    *
FROM orders
ORDER BY sale ASC
LIMIT 5


-- Q.4 What is the total sale for GOA?

SELECT 
    SUM(sale) as total_sale_goa 
FROM orders
WHERE state = 'Goa'
 
    
SELECT * FROM orders
WHERE state = 'Goa'


-- Q.5 What is the total sale for Goa, Assam, Bihar?

SELECT 
    SUM(sale) as total_sale_goa 
FROM orders
WHERE state = 'Goa' OR state ='Bihar' OR state ='Assam'

SELECT 
    SUM(sale) as total_sale_goa_furniture
FROM orders
WHERE state = 'Goa' AND category = 'Furniture'



SELECT 
    *
FROM orders
WHERE state IN ('Goa', 'Bihar','Assam')


-- Q.6 How many unique customers have placed orders?

SELECT 
    COUNT(DISTINCT customer_id) as total_uniq_cx
FROM orders


-- Select order details where qty is greater than 4
-- How many orders are there where qty is greater than 4

SELECT 
COUNT(*) as total_order_qty_greater_4
FROM orders
WHERE quantity > 4


-- 
SELECT 
    MAX(price_per_unit) 
FROM orders;

SELECT 
    MIN(price_per_unit) 
FROM orders;


-- GROUP BY


-- Q. 7 What is the total sales revenue generated by each state?
-- state
-- SUM(sale)


SELECT 
state,
SUM(sale) as total_sale    
FROM orders
WHERE state IS NOT NULL    
GROUP BY state
ORDER BY total_sale ASC


-- SQL order of execution
SELECT
FROM
JOIN
WHERE
GROUP BY 
HAVING
ORDER BY 
LIMIT



-- Q.8 Find top 3 products and revenue generated | Having revenue > 20000
-- find all products and their sale group by pid
-- order by DESC    
-- LIMIT 3
-- WHERE revenue > 20000
    

SELECT 
    product_id, -- 1 column
    SUM(sale) as total_sale --- 2 column
FROM orders
-- WHERE total_sale > 25000   cannot use it here  
GROUP BY 1
HAVING SUM(sale) > 25000
ORDER BY total_sale DESC
LIMIT 3



SELECT 
    product_id,
    SUM(sale) as total_sale
FROM orders
-- WHERE total_sale > 25000   cannot use it here  
GROUP BY 1
HAVING SUM(sale) > 25000
ORDER BY 2 DESC
LIMIT 3
    
    

    
SELECT 
    product_id,
    SUM(sale) as total_sale
FROM orders
-- WHERE total_sale > 25000   cannot use it here  
GROUP BY 1
HAVING SUM(sale) > 10000
ORDER BY 2 DESC
LIMIT 3

/* 
Q.8 
How many orders were placed by each customer, 
and what is their average order quantity, avg_sale?
*/
-- each(group by cx id) cx and total orders (count)
-- avg(sale),  avg(qty)

    
SELECT 
    customer_id,
    COUNT(*) as total_orders,
    AVG(quantity) as avg_qty_ordered,
    AVG(sale) as avg_sale,
    SUM(sale) as total_spend
FROM orders
GROUP BY 1

-- END SQL CONCEPT TILL GROUP BY and HAVING 






-- SQL B3 D1- JOINs 

-- Find customers name and total orders and total revenue
-- cx name from cx table 
-- join cx and orders based cx id 
-- group by cx id or cx name 
-- total orders and revenue 

SELECT 
    c.customer_name,
    o.customer_id,
    SUM(o.sale) as total_sale,
    COUNT(*) as total_orders   
FROM orders as o
INNER JOIN 
customers as c
ON c.customer_id = o.customer_id   
GROUP BY o.customer_id, c.customer_name



    
SELECT 
    o.order_id,
    o.order_date,
    o.customer_id as cx_id_from_orders,
    o.sale,
    c.customer_id as cx_id_from_cxtable,
    c.customer_name
FROM orders as o
INNER JOIN 
customers as c
ON c.customer_id = o.customer_id    
WHERE c.customer_name = 'Ankit'


    

SELECT * FROM customers
SELECT * FROM orders



-- Identify all orders that have been returned, along with the details of the returns (if available). (LEFT JOIN)

SELECT 
    *
FROM returns as r
LEFT JOIN 
orders as o    
ON o.order_id = r.order_id


SELECT 
    *
FROM returns as r
FULL OUTER JOIN 
orders as o    
ON o.order_id = r.order_id
;

-- 

